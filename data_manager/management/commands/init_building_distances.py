"""
충북대학교 건물 간 거리 데이터 초기화 스크립트
지도를 기반으로 주요 건물 간 도보 시간을 하드코딩
"""

from django.core.management.base import BaseCommand
from data_manager.models import BuildingDistance


class Command(BaseCommand):
    help = '충북대학교 건물 간 거리 데이터 초기화'

    def handle(self, *args, **options):
        # 기존 데이터 삭제
        BuildingDistance.objects.all().delete()

        # 건물 간 거리 데이터 (분, 미터)
        # 지도 기반 추정값 - 인접: 1-2분, 근거리: 3-5분, 중거리: 5-10분, 원거리: 10-15분
        distances = [
            # N 구역 (북쪽 구역) 내부
            ('N1', 'N2', 2, 150),
            ('N1', 'N3', 3, 200),
            ('N1', 'N4', 2, 100),
            ('N1', 'N5', 3, 250),
            ('N1', 'N6', 4, 300),
            ('N1', 'N7', 5, 400),
            ('N1', 'N8', 3, 200),
            ('N1', 'N9', 4, 350),
            ('N1', 'N10', 2, 150),
            ('N1', 'N11', 3, 250),
            ('N1', 'N12', 4, 300),
            ('N1', 'N13', 5, 400),
            ('N1', 'N14', 2, 150),
            ('N1', 'N15', 3, 200),
            ('N1', 'N16', 4, 350),
            ('N1', 'N17', 5, 450),
            ('N1', 'N20', 6, 500),
            ('N1', 'N21', 7, 600),

            ('N2', 'N3', 2, 100),
            ('N2', 'N4', 3, 200),
            ('N2', 'N5', 2, 150),
            ('N2', 'N6', 3, 250),
            ('N2', 'N10', 3, 200),
            ('N3', 'N4', 2, 100),
            ('N3', 'N5', 2, 150),
            ('N4', 'N5', 2, 100),
            ('N10', 'N11', 2, 100),
            ('N10', 'N14', 2, 150),
            ('N11', 'N12', 2, 150),
            ('N12', 'N13', 2, 150),
            ('N14', 'N15', 2, 100),
            ('N15', 'N16', 2, 150),
            ('N16', 'N17', 2, 150),
            ('N17', 'N20', 3, 200),
            ('N20', 'N21', 2, 150),

            # S 구역 (남쪽 구역) 내부
            ('S1', 'S2', 2, 150),
            ('S1', 'S3', 3, 200),
            ('S1', 'S4', 2, 100),
            ('S1', 'S5', 3, 250),
            ('S1', 'S6', 4, 300),
            ('S1', 'S7', 5, 400),
            ('S1', 'S8', 3, 200),
            ('S1', 'S9', 4, 350),
            ('S1', 'S12', 5, 450),
            ('S1', 'S13', 3, 250),
            ('S1', 'S14', 4, 300),
            ('S1', 'S15', 5, 400),
            ('S1', 'S16', 2, 150),
            ('S1', 'S17', 3, 200),
            ('S1', 'S19', 4, 350),
            ('S1', 'S20', 5, 450),
            ('S1', 'S21', 6, 500),

            ('S2', 'S3', 2, 100),
            ('S2', 'S4', 3, 200),
            ('S3', 'S4', 2, 100),
            ('S4', 'S5', 2, 150),
            ('S5', 'S6', 2, 150),
            ('S6', 'S7', 2, 150),
            ('S8', 'S9', 2, 100),
            ('S12', 'S13', 2, 150),
            ('S13', 'S14', 2, 100),
            ('S14', 'S15', 2, 150),
            ('S16', 'S17', 2, 100),
            ('S17', 'S19', 2, 150),
            ('S19', 'S20', 2, 150),
            ('S20', 'S21', 2, 150),

            # E 구역 (동쪽 구역) 내부
            ('E1', 'E2', 2, 150),
            ('E1', 'E3', 3, 200),
            ('E1', 'E4', 4, 300),
            ('E1', 'E5', 5, 400),
            ('E1', 'E7', 3, 250),
            ('E1', 'E8', 4, 350),
            ('E1', 'E9', 5, 450),
            ('E1', 'E10', 6, 500),
            ('E1', 'E11', 7, 600),
            ('E1', 'E12', 8, 700),

            ('E2', 'E3', 2, 100),
            ('E3', 'E4', 2, 150),
            ('E4', 'E5', 2, 150),
            ('E7', 'E8', 2, 150),
            ('E8', 'E9', 2, 150),
            ('E9', 'E10', 2, 150),
            ('E10', 'E11', 2, 150),
            ('E11', 'E12', 2, 150),

            # N-S 구역 간 연결
            ('N1', 'S1', 8, 700),
            ('N1', 'S2', 9, 800),
            ('N1', 'S21', 10, 900),
            ('N2', 'S1', 7, 600),
            ('N2', 'S2', 8, 700),
            ('N3', 'S3', 7, 650),
            ('N4', 'S4', 7, 650),
            ('N5', 'S5', 8, 700),
            ('N10', 'S1', 9, 800),
            ('N10', 'S13', 6, 500),
            ('N11', 'S14', 6, 550),
            ('N12', 'S15', 7, 600),
            ('N14', 'S16', 6, 500),
            ('N15', 'S17', 6, 550),
            ('N16', 'S19', 7, 600),
            ('N17', 'S20', 7, 650),
            ('N20', 'S21', 8, 700),

            # N-E 구역 간 연결
            ('N1', 'E1', 10, 900),
            ('N1', 'E2', 11, 1000),
            ('N1', 'E3', 9, 800),
            ('N10', 'E1', 8, 700),
            ('N10', 'E3', 7, 600),
            ('N14', 'E4', 6, 500),
            ('N15', 'E5', 6, 550),
            ('N16', 'E7', 5, 450),
            ('N17', 'E8', 5, 400),
            ('N20', 'E9', 6, 500),
            ('N21', 'E10', 7, 600),

            # S-E 구역 간 연결
            ('S1', 'E1', 7, 600),
            ('S1', 'E2', 8, 700),
            ('S1', 'E3', 6, 500),
            ('S2', 'E1', 6, 550),
            ('S3', 'E2', 6, 500),
            ('S4', 'E3', 5, 450),
            ('S5', 'E4', 5, 400),
            ('S6', 'E5', 5, 450),
            ('S12', 'E7', 4, 350),
            ('S13', 'E8', 4, 300),
            ('S14', 'E9', 5, 400),
            ('S16', 'E7', 6, 500),
            ('S17', 'E8', 6, 550),
            ('S19', 'E9', 5, 450),
            ('S20', 'E10', 5, 400),
            ('S21', 'E11', 6, 500),
        ]

        # 양방향 거리 데이터 생성
        all_distances = []
        for from_bldg, to_bldg, time, distance in distances:
            all_distances.append((from_bldg, to_bldg, time, distance))
            if from_bldg != to_bldg:  # 같은 건물이 아닌 경우만 역방향 추가
                all_distances.append((to_bldg, from_bldg, time, distance))

        # 데이터베이스에 저장
        building_distances = []
        for from_bldg, to_bldg, time, distance in all_distances:
            building_distances.append(
                BuildingDistance(
                    from_building=from_bldg,
                    to_building=to_bldg,
                    walking_time=time,
                    distance=distance
                )
            )

        # 같은 건물 간 거리 (0분, 0m) 추가
        buildings = set()
        for from_bldg, to_bldg, _, _ in distances:
            buildings.add(from_bldg)
            buildings.add(to_bldg)

        for building in buildings:
            building_distances.append(
                BuildingDistance(
                    from_building=building,
                    to_building=building,
                    walking_time=0,
                    distance=0
                )
            )

        # 벌크 인서트
        BuildingDistance.objects.bulk_create(building_distances, ignore_conflicts=True)

        self.stdout.write(
            self.style.SUCCESS(
                f'건물 간 거리 데이터 {len(building_distances)}개 초기화 완료'
            )
        )